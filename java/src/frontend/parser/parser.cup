package frontend.parser;

import java_cup.runtime.*;
import utils.UnorderedTree;
import frontend.tokeniser.Token;
import frontend.tokeniser.TokeniserSym;
import utils.*;

terminal Token EQ,PLUS, MINUS, DIVIDE, TIMES;
terminal Token INTEGER_LITERAL;
terminal Token IDENTIFIER;
terminal Token OPARENS, CPARENS;

non terminal UnorderedTree<Token>	expr, term, factor;

expr    ::=     expr:e PLUS:plus term:t
                {: RESULT = new UnorderedTree<Token>(new Token(plus.val, TokeniserSym.IDENTIFIER), e, t); :}
        |       expr:e MINUS:minus term:t
                {: RESULT =  new UnorderedTree<Token>(new Token(minus.val, TokeniserSym.IDENTIFIER), e, t); :}
        |       term:t
                {: RESULT = t; :}
        ;
term    ::=     term:t TIMES:times factor:f
                {: RESULT = new UnorderedTree<Token>(new Token(times.val, TokeniserSym.IDENTIFIER), t, f); :}
        |       term:t DIVIDE:divide factor:f
                {: RESULT = new UnorderedTree<Token>(new Token(divide.val, TokeniserSym.IDENTIFIER), t, f); :}
        |       term:t EQ:eq factor:f
                {: RESULT = new UnorderedTree<Token>(new Token(eq.val, TokeniserSym.IDENTIFIER), t, f); :}
        |       IDENTIFIER:id factor:f
                {: RESULT = new UnorderedTree<Token>(new Token(id.val, TokeniserSym.IDENTIFIER), f); :}
        |       factor:f
                {: RESULT = f; :}
        ;
factor  ::=     INTEGER_LITERAL:i
                {: RESULT = new UnorderedTree<Token>(new Token(i.val, i.id)); :}
        |       OPARENS:open expr:e CPARENS:close
                {: RESULT = e; :}
        ;